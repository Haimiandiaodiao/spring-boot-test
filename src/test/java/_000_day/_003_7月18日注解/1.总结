1.元注解------用在注解上的注解 包括：@Retention、@Documented、@Target、@Inherited、@Repeatable
    【1】@Retetion 保留时间
        - RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。
        - RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。
        - RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。
    【2】@Documented  文档注解
        -这个元注解肯定是和文档有关。它的作用是能够将注解中的元素包含到 Javadoc 中去。
    【3】@Target 目标注解限定注解的使用场景
        ElementType.ANNOTATION_TYPE 可以给一个注解进行注解
        ElementType.CONSTRUCTOR 可以给构造方法进行注解
        ElementType.FIELD 可以给属性进行注解
        ElementType.LOCAL_VARIABLE 可以给局部变量进行注解
        ElementType.METHOD 可以给方法进行注解
        ElementType.PACKAGE 可以给一个包进行注解
        ElementType.PARAMETER 可以给一个方法内的参数进行注解
        ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举
     【4】@Inherited 如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。
        @Inherited
        @Retention(RetentionPolicy.RUNTIME)
        @interface Test {}

        @Test
        public class A {}

        public class B extends A {}
        注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解。

      【5】@Repeatable 自然是可重复的意思。@Repeatable 是 Java 1.8 才加进来的，所以算是一个新的特性。
                       什么样的注解会多次应用呢？通常是注解的值可以同时取多个。


                @interface Persons {
                    Person[]  value();
                }


                @Repeatable(Persons.class)
                @interface Person{
                    String role default "";
                }


                @Person(role="artist")
                @Person(role="coder")
                @Person(role="PM")
                public class SuperMan{

                }
2.注解的属性注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型
  【1】注意自定义属性中不能使用   包装类型
  【2】使用default 添加默认值
  【3】自定以注解里面只有 一个 value字段的话 在赋值的时候就可以省略 属性名

3.JDK自带的注解
   @Deparcated 过时的
   @Override 复写
   @SuppressWarnings 阻止警告
    等等一些注解




    注解有许多用处，主要如下：
    - 提供信息给编译器： 编译器可以利用注解来探测错误和警告信息
    - 编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、Html文档或者做其它相应处理。
    - 运行时的处理： 某些注解可以在程序运行的时候接受代码的提取